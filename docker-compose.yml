version: "3.8"

services:

  backend:
    image: currency-converter-backend
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    env_file:
      - .env
    volumes:
      - ./app:/app
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py loaddata app/fixtures/init_fixture.json &&
             python manage.py runserver 0.0.0.0:8000"
  # gunicorn app.wsgi:application --bind 0.0.0.0:8000"
    ports:
      - "8000:8000"
    networks:
      - currency_converter

  client-backend:
    image: currency-converter-client
    build:
      context: .
      dockerfile: docker/client/Dockerfile
    env_file:
      - .env
    volumes:
      - ./client:/client
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py loaddata app/fixtures/init_fixture.json &&
             python manage.py runserver 0.0.0.0:8001"
    ports:
      - "8001:8001"
    networks:
      - currency_converter

#  nginx:
#    build:
#      context: .
#      dockerfile: nginx.Dockerfile
#    ports:
#      - "80:80"
#    depends_on:
#      - backend
#    volumes:
#      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
#      - ./app/static:/app/static

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - currency_converter

  db-client:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "4321:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - currency_converter

  redis:
    image: redis:alpine
    ports:
      - "6378:6379"
    networks:
      - currency_converter

  celery-beat:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    command: celery -A app beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - .env
    volumes:
      - ./app:/app
    depends_on:
      - db
      - redis
    restart: on-failure
    networks:
      - currency_converter

  celery-worker:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    command: celery -A app worker -l info -E
    env_file:
      - .env
    volumes:
      - ./app:/app
    depends_on:
      - db
      - redis
    networks:
      - currency_converter

volumes:
  pgdata:

networks:
  currency_converter: